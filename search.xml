<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git基本命令</title>
    <url>/git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<h1 id="git仓库基础操作"><a href="#git仓库基础操作" class="headerlink" title="git仓库基础操作"></a>git仓库基础操作</h1><h2 id="仓库基本管理"><a href="#仓库基本管理" class="headerlink" title="仓库基本管理"></a>仓库基本管理</h2><p>初始化一个git仓库<br><code>git init</code>    </p>
<span id="more"></span>

<p>#初始化当前文件夹为一个git仓库</p>
<h2 id="将文件添加到git的暂存区"><a href="#将文件添加到git的暂存区" class="headerlink" title="将文件添加到git的暂存区"></a>将文件添加到git的暂存区</h2><p><code>git add &quot;readme.txi&quot;</code><br>注：使用<code>git add -A</code>或<code>git add .</code>，可以提交当前仓库的所有改动</p>
<h2 id="查看仓库当前文件提交状态"><a href="#查看仓库当前文件提交状态" class="headerlink" title="查看仓库当前文件提交状态"></a>查看仓库当前文件提交状态</h2><p><code>git status -s</code>  </p>
<h2 id="从git的暂存区提交版本到仓库，参数-m后为当次提交的备注信息"><a href="#从git的暂存区提交版本到仓库，参数-m后为当次提交的备注信息" class="headerlink" title="从git的暂存区提交版本到仓库，参数-m后为当次提交的备注信息"></a>从git的暂存区提交版本到仓库，参数<code>-m</code>后为当次提交的备注信息</h2><p><code>git commit -m &quot;1.0.0&quot;</code>  </p>
<h2 id="将本地仓库信息推送上传到服务器"><a href="#将本地仓库信息推送上传到服务器" class="headerlink" title="将本地仓库信息推送上传到服务器"></a>将本地仓库信息推送上传到服务器</h2><p><code>git push https://giteee.com/***/test.git</code><br>如果是克隆下来的仓库，可以省去链接<br>直接<code>git push</code>会提示输入用户名密码，可以配置TOKEN后，能过SSH克隆，再上传时不用输入密码。</p>
<h1 id="远程仓库管理"><a href="#远程仓库管理" class="headerlink" title="远程仓库管理"></a>远程仓库管理</h1><h2 id="修改仓库名"><a href="#修改仓库名" class="headerlink" title="修改仓库名"></a>修改仓库名</h2><p>一般来讲，默认情况下，在执行克隆操作时，仓库名者是origin如果说多们想给它改名为wang，可以使用以下命令  </p>
<p><code>git remote rename origin wang</code>  </p>
<h2 id="添加一个仓库"><a href="#添加一个仓库" class="headerlink" title="添加一个仓库"></a>添加一个仓库</h2><p>在不执行克隆操作时，如果想将一个远程仓库添加到本地仓库中，可以执行<br><code>git remote add origin &quot;https://&quot;</code><br>注意：<code>origin</code>是你仓库的别名，可以随便改，但请务必不要与已有的仓库别名冲突，仓库地址一般来讲支持<code>http/https/ssh/git</code>等协议，其他协议地址请勿添加</p>
<h2 id="查看当前仓库对应的远程仓库地址"><a href="#查看当前仓库对应的远程仓库地址" class="headerlink" title="查看当前仓库对应的远程仓库地址"></a>查看当前仓库对应的远程仓库地址</h2><p><code>git remote -v</code><br>这条命令能显示你当前仓库中已经添加了的倒库名和对应的仓库地址，通常来讲，会有两条一模一样的记录，分别是fetch和push，其中fetch是用来从远程同步，push是用来推送到远程。</p>
<h2 id="修改仓库对应的远程仓库地址"><a href="#修改仓库对应的远程仓库地址" class="headerlink" title="修改仓库对应的远程仓库地址"></a>修改仓库对应的远程仓库地址</h2><p><code>git remote set-url origin &quot;https://</code></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>linux安装docker</title>
    <url>/linux%E5%AE%89%E8%A3%85docker.html</url>
    <content><![CDATA[<h1 id="使用官方安装脚本自动安装"><a href="#使用官方安装脚本自动安装" class="headerlink" title="使用官方安装脚本自动安装"></a>使用官方安装脚本自动安装</h1><p><code>curl -fsSL https://test.docker.com -o test-docker.shdocker.sh</code></p>
<p><code>sudo sh test-docker.sh</code></p>
<span id="more"></span>

<h1 id="允许非Root用户执行docker-命令"><a href="#允许非Root用户执行docker-命令" class="headerlink" title="允许非Root用户执行docker 命令"></a>允许非Root用户执行docker 命令</h1><p><code>sudo groupadd docker</code> #添加docker用户组</p>
<p><code>sudo usermod -aG docker $USER</code> #将当前用户添加到用户组</p>
<p><code>newgrp docker</code> #使权限生效</p>
<p><code>docker ps -a</code> #测试一下</p>
<h1 id="最后一步-更新-bashrc文件"><a href="#最后一步-更新-bashrc文件" class="headerlink" title="最后一步 更新.bashrc文件"></a>最后一步 更新.bashrc文件</h1><p>我们需要编辑 <code>~/.bashrc</code>文件，并在文件末尾增加如下一行，如果没有此行命令，你会发现，当你每次打开新的终端，你都必须先执行一次<code>newgrp docker</code>命令，否则当前用户还是不可以执行docker命令。</p>
<p><code>groupadd -f docker</code></p>
<h2 id="docker安装青龙面板"><a href="#docker安装青龙面板" class="headerlink" title="docker安装青龙面板"></a>docker安装青龙面板</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -dit \\</span><br><span class="line">  -v <span class="variable">$PWD</span>/ql/data:/ql/data \\</span><br><span class="line">  -p 5700:5700 \\</span><br><span class="line">  --name qinglong \\</span><br><span class="line">  --hostname qinglong \\</span><br><span class="line">  --restart unless-stopped \\</span><br><span class="line">  whyour/qinglong:latest</span><br></pre></td></tr></table></figure>

<p>青龙面板通用依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#NodeJs</span></span><br><span class="line">request</span><br><span class="line">crypto-js</span><br><span class="line">prettytable</span><br><span class="line">dotenv</span><br><span class="line">jsdom</span><br><span class="line">date-fns</span><br><span class="line">tough-cookie</span><br><span class="line">tslib</span><br><span class="line">ws@7.4.3</span><br><span class="line">ts-md5</span><br><span class="line">jsdom -g</span><br><span class="line">jieba</span><br><span class="line">fs</span><br><span class="line">form-data</span><br><span class="line">json5</span><br><span class="line">global-agent</span><br><span class="line">png-js</span><br><span class="line">@types/node</span><br><span class="line">require</span><br><span class="line">typescript</span><br><span class="line">js-base64</span><br><span class="line">axios</span><br><span class="line">moment</span><br><span class="line"></span><br><span class="line"><span class="comment">#Python3</span></span><br><span class="line">requests</span><br><span class="line">canvas</span><br><span class="line">ping3</span><br><span class="line">jieba</span><br><span class="line">PyExecJS</span><br><span class="line">aiohttp</span><br><span class="line"></span><br><span class="line"><span class="comment">#Linux</span></span><br><span class="line">bizCode</span><br><span class="line">bizMsg</span><br><span class="line">lxm</span><br></pre></td></tr></table></figure>

<h3 id="青龙面板安装脚本"><a href="#青龙面板安装脚本" class="headerlink" title="青龙面板安装脚本"></a>青龙面板安装脚本</h3><ul>
<li>GlaDOS</li>
</ul>
<p><a href="https://github.com/hennessey-v/GlaDOS_Checkin_ql">hennessey-v&#x2F;GlaDOS_Checkin_ql: 基于Python实现的GLaDOS自动签到项目。可部署在青龙面板，支持多账号。 (github.com)</a></p>
<ul>
<li>JD</li>
</ul>
<p><a href="https://github.com/6dylan6/jdpro">6dylan6&#x2F;jdpro (github.com)</a></p>
<p><a href="https://blog.csdn.net/m0_64632940/article/details/124115228">获取京东cookie（青龙面板，含各种库）_jd cookie-CSDN博客</a></p>
<ul>
<li><a href="https://sitoi.github.io/dailycheckin/"><strong>DailyCheckin</strong></a></li>
</ul>
<p><a href="https://sitoi.github.io/dailycheckin/settings/notify/turbo/">Server 酱 TURBO – DailyCheckIn (sitoi.github.io)</a></p>
<h2 id="Docker安装Aria2-pro"><a href="#Docker安装Aria2-pro" class="headerlink" title="Docker安装Aria2 pro"></a>Docker安装Aria2 pro</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name aria2 \</span><br><span class="line">--restart unless-stopped \</span><br><span class="line">--log-opt max-size=1m \</span><br><span class="line">-e PUID=<span class="variable">$UID</span> \</span><br><span class="line">-e PGID=<span class="variable">$GID</span> \</span><br><span class="line">-e UMASK_SET=022 \</span><br><span class="line">-e RPC_SECRET=prc_password \</span><br><span class="line">-e RPC_PORT=6800 \</span><br><span class="line">-e LISTEN_PORT=6888 \</span><br><span class="line">-p 6800:6800 \</span><br><span class="line">-p 6888:6888 \</span><br><span class="line">-p 6888:6888/udp \</span><br><span class="line">-v /root/aria2/config:/config \</span><br><span class="line">-v /root/aria2/downloads:/downloads \</span><br><span class="line">p3terx/aria2-pro</span><br></pre></td></tr></table></figure>

<p><strong>启动容器命令参数详解</strong></p>
<ul>
<li>用户和组设定： <code>PUID=$UID、PGID=$GID</code>这2个定义用户和用户组的环境变量，限定了aria2以什么用户和用户组运行，不指定则默认使用<code>nobady</code>用户和<code>nogroup</code>用户组。</li>
<li>几个环境变量: <code>-e UMASK_SET=022</code> ，设置<code>umask</code>，默认值022； <code>-e RPC_SECRET=</code>，设置RPC密钥，用于AriaNg与Aria2的通讯验证使用； <code>-e RPC_PORT=6800</code>，设置PRC通讯端口（与宿主主机的端口映射一致）； <code>-e LISTEN_PORT=6888</code>，BT 监听端口（TCP）、DHT 监听端口（UDP）设置，即 Aria2 配置中<code>listen-port</code>与<code>dht-listen-port</code>选项定义的端口。如果没有设置，配置文件中的默认值为6888。</li>
<li>容器目录挂载，将<code>/downloads</code>挂载到宿主主机的<code>/root/aria2/downloads:/downloads</code>目录，即FileRun的数据目录中，方便下载完成直接在网盘中查看；配置文件挂载到指定的宿主主机目录<code>/root/aria2/config</code>中，宿主主机的目录根据实际情况自行修改；</li>
<li>3个端口映射： <code>-p 6800:6800</code>，为RPC 通讯端口映射； <code>-p 6888:6888</code>，为BT 监听端口（TCP）映射，即 Aria2 配置中listen-port选项定义的端口； -p 6888:6888&#x2F;udp，为DHT 监听端口（UDP）映射，即 Aria2 配置中dht-listen-port选项定义的端口。</li>
<li>[Aria2 Pro - 更好用的 Aria2 Docker 容器镜像 - P3TERX ZONE</li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux安装frps</title>
    <url>/linux%E5%AE%89%E8%A3%85frps.html</url>
    <content><![CDATA[<h3 id="下载并解压缩"><a href="#下载并解压缩" class="headerlink" title="下载并解压缩"></a>下载并解压缩</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载</span><br><span class="line">wget &lt;https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.42.0_linux_amd64.tar.gz&gt;</span><br><span class="line"># 解压缩</span><br><span class="line">tar xf frp_0.42.0_linux_amd64.tar.gz</span><br><span class="line"># 重命名</span><br><span class="line">mv frp_0.42.0_linux_amd64 /usr/local/frps/</span><br><span class="line">cd /usr/local/frps</span><br><span class="line"># 删除客户端frpc相关的文件</span><br><span class="line">rm -f frpc*</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="修改服务端配置文件frps-toml文件"><a href="#修改服务端配置文件frps-toml文件" class="headerlink" title="修改服务端配置文件frps.toml文件"></a>修改服务端配置文件frps.toml文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frps.toml     #打开配置文件，添加以下代码</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">bind_port =8100</span><br><span class="line">vhost_http_port = 6100</span><br><span class="line">subdomain_host = a.b.com</span><br><span class="line">dashboard_port = 7100</span><br><span class="line">dashboard_user = username自定义</span><br><span class="line">dashboard_pwd = password自定义</span><br><span class="line">log_file = ./logs/frps.log</span><br><span class="line">log_level = error</span><br><span class="line">log_max_days = 3</span><br><span class="line">token = token自定义</span><br><span class="line">max_pool_count = 50</span><br><span class="line">tcp_mux = true</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>bind_port</td>
<td>客户端与服务端交互接口</td>
</tr>
<tr>
<td>vhost_http_port</td>
<td>http端口</td>
</tr>
<tr>
<td>subdomain_host</td>
<td>自定义域名</td>
</tr>
<tr>
<td>dashboard_port</td>
<td>服务器后台web访问端口</td>
</tr>
<tr>
<td>dashboard_user</td>
<td>服务器后台web访问用户名</td>
</tr>
<tr>
<td>dashboard_pwd</td>
<td>服务器后台web访问密码</td>
</tr>
<tr>
<td>log_file</td>
<td>定义log文件名称及存放位置</td>
</tr>
<tr>
<td>log_level</td>
<td>log文件记录的最低级别</td>
</tr>
<tr>
<td>log_max_days</td>
<td>log记录的最大天数</td>
</tr>
<tr>
<td>token</td>
<td>定义log文件名称及存放位置</td>
</tr>
<tr>
<td>max_pool_count</td>
<td>最大连接池大小</td>
</tr>
</tbody></table>
<h3 id="配置frps启动服务"><a href="#配置frps启动服务" class="headerlink" title="配置frps启动服务"></a>配置frps启动服务</h3><ul>
<li>使用以下命令启动服务器：<code>./frps -c ./frps.toml</code></li>
<li>使用以下命令启动客户端：<code>./frpc -c ./frpc.toml</code></li>
<li>如果需要在后台长期运行，建议结合其他工具，如 systemd 和 <code>supervisor</code></li>
<li>systemd<ul>
<li>使用文本编辑器 (如 vim) 在 <code>/etc/systemd/system</code> 目录下创建一个 <code>frps.service</code> 文件，用于配置 frps 服务。</li>
<li><code>vim /etc/systemd/system/frps.service</code></li>
<li>写入内容</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"># 服务名称，可自定义</span><br><span class="line">Description = frp server</span><br><span class="line">After = network.target syslog.target</span><br><span class="line">Wants = network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type = simple</span><br><span class="line"># 启动frps的命令，需修改为您的frps的安装路径</span><br><span class="line">ExecStart = /path/to/frps -c /path/to/frps.toml</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy = multi-user.target</span><br></pre></td></tr></table></figure>

<h3 id="使用-systemd-命令管理-frps-服务"><a href="#使用-systemd-命令管理-frps-服务" class="headerlink" title="使用 systemd 命令管理 frps 服务"></a>使用 systemd 命令管理 frps 服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动frp</span><br><span class="line">sudo systemctl start frps</span><br><span class="line"># 停止frp</span><br><span class="line">sudo systemctl stop frps</span><br><span class="line"># 重启frp</span><br><span class="line">sudo systemctl restart frps</span><br><span class="line"># 查看frp状态</span><br><span class="line">sudo systemctl status frps</span><br></pre></td></tr></table></figure>

<h3 id="设置-frps-开机自启动"><a href="#设置-frps-开机自启动" class="headerlink" title="设置 frps 开机自启动"></a>设置 frps 开机自启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable frps</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux安装hexo</title>
    <url>/linux%E5%AE%89%E8%A3%85hexo.html</url>
    <content><![CDATA[<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><ul>
<li>安装git</li>
<li>安装nodejs</li>
<li>安装brrew（非root用户安装）<span id="more"></span>
<ul>
<li>安装必要依赖<br><code>sudo apt-get install build-essential procps curl filegit</code></li>
<li>安装brew   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure></li>
<li>运行它建议的二条命令</li>
<li>验证安装 <code>brew doctor</code></li>
</ul>
</li>
<li>用brew安装hexo <code>brew install hexo</code></li>
<li>初始化博客 <code>hexo init myblong</code></li>
<li>安装next主题 <code>npm install hexo-theme-next@latest</code></li>
<li>安装一键部署插件 <code>npm install hexo-deployer-git --save</code></li>
</ul>
<h3 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h3><ul>
<li><p>拷贝主题配置文件至博客要目录 <code>cp node_modules/hexo-theme-next/_config.yml _config.next.yml</code></p>
</li>
<li><p>配置github用户名和邮箱</p>
<ul>
<li><code>  git config --global user.email &quot;you@example.com&quot;</code></li>
<li><code>  git config --global user.name &quot;Your Name&quot;</code></li>
</ul>
</li>
<li><p>配置hexo配置文件中的github连接</p>
</li>
<li><p>新建标签页面 <code>hexo new page tags</code> 并配置内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2024-07-23 19:10:43</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>新建分类页面 <code>hexo new categories</code> 并配置内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2024-07-23 19:10:43</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>配置搜索</p>
<ul>
<li>安装插件 <code>npm install hexo-generator-searchdb</code></li>
<li>hexo配置文件中添加以下内容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure></li>
<li>next配置文件中修改<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>配置阅读进度</p>
<ul>
<li>修改主题配置文件</li>
<li>搜索<code>back2top</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true # 开启 back to top 按钮</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: true # true 表示在侧边栏显示，false则在侧下角</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true # 开启进度百分比</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>相关链接</p>
<ul>
<li><a href="https://github.com/hexojs/hexo">hexo</a></li>
<li><a href="https://hexo.io/docs/configuration.html#Using-an-Alternate-Config">hexo文档</a></li>
<li><a href="https://github.com/next-theme/hexo-theme-next">hexo-theme-next</a></li>
<li><a href="https://theme-next.js.org/">next文档</a></li>
<li><a href="https://dayuzy.com/2024%E4%BF%9D%E5%A7%86%E7%BA%A7Hexo.html">hexo+next文档</a> </li>
<li><a href="https://linux.cn/article-14065-1.html">homebrew安装</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux安装zerotier</title>
    <url>/linux%E5%AE%89%E8%A3%85zerotier.html</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>curl -s [&lt;https://install.zerotier.com&gt;](&lt;https://install.zerotier.com/&gt;) | sudo bash</code></p>
<p>安装成功后会提示：<code>Success! You are Zerotier address [XXXXXXX]</code></p>
<span id="more"></span>

<p>安装进度和网络情况相关。</p>
<p>最终安装成功，可以在<code>/usr/sbin/</code>目录下看到<code>zerotier-one</code>和<code>zerotier-cli</code>工具。</p>
<p>可以通过以下指令更新：</p>
<p><code>sudo apt-get update zerotier-one</code></p>
<h3 id="相关操作指令"><a href="#相关操作指令" class="headerlink" title="相关操作指令"></a>相关操作指令</h3><ul>
<li><p>启动&#x2F;停止服务 <code>sudo systemctl start zerotier-one.service</code></p>
<p><code>sudo systemctl stop zerotier-one.service</code></p>
</li>
<li><p>加入网络</p>
<p><code>sudo zerotier-cli join your-networkid</code></p>
</li>
<li><p>查看网络列表</p>
<p><code>sudo zerotier-cli listnetworks</code></p>
</li>
<li><p>查看当前网络状态</p>
<p><code>sudo zerotier-cli status</code></p>
</li>
<li><p>离开网络</p>
<p><code>sudo zerotier-cli leave your-networkid</code></p>
</li>
<li><p>设置开启自启动</p>
<p><code>sudo systemctl enable zerotier-one.service</code></p>
</li>
<li><p>卸载</p>
<p><code>sudo apt-get remove zerotier-one</code> <code>sudo dpkg -P zerotier-one</code></p>
</li>
<li><p>删除配置信息</p>
<p><code>sudo rm -rf /var/lib/zerotier-one</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux安装花生壳</title>
    <url>/linux%E5%AE%89%E8%A3%85%E8%8A%B1%E7%94%9F%E5%A3%B3.html</url>
    <content><![CDATA[<ul>
<li><a href="https://hsk.oray.com/download">花生壳客户端官方下载</a> 下载客户端</li>
<li>以管理员身份运行 <code>dpkg -i phddns-*.*.*-amd64.deb</code><span id="more"></span></li>
<li>启动：<code>phddns start</code></li>
<li>状态：<code>phddns status</code></li>
<li>停止：<code>phddns stop</code></li>
<li>重启：<code>phddns restart</code></li>
<li>重置：<code>phddns reset</code></li>
<li>开机自启动：<code>phddns enable</code></li>
<li>关闭开机自启动：<code>phddns disable</code></li>
<li>查看版本号：<code>phddns version</code></li>
<li>卸载：<code>dpkg -r phddns</code></li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux配置samba</title>
    <url>/linux%E9%85%8D%E7%BD%AEsamba.html</url>
    <content><![CDATA[<h3 id="本文是在ubuntu下设置smba"><a href="#本文是在ubuntu下设置smba" class="headerlink" title="本文是在ubuntu下设置smba"></a>本文是在ubuntu下设置smba</h3><span id="more"></span>

<ul>
<li><code>sudo apt update</code> 更新下apt</li>
<li><code>apt install samba -y</code> 安装smba</li>
<li><code>mkdir -p Share</code> 创建共享文件夹</li>
<li><code>chmod 0777 Share</code> 设置共享文件夹权限</li>
<li><code>vim /etc/samba/smb.conf</code> 修改配置文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在文件[global]中修改以下内容</span><br><span class="line">[global]</span><br><span class="line"> security = user                  #密码访问的选项</span><br><span class="line">#在文件最后增加以下内容</span><br><span class="line">[Ubuntu_22.04]                      #共享名称</span><br><span class="line">    comment = Samba                  #描述</span><br><span class="line">    path = /home/wang/Share        #共享路径</span><br><span class="line">    public = no                      #是否允许匿名访问</span><br><span class="line">    writable = yes                  #是否允许编辑、删除文件</span><br><span class="line">    available = yes                  #共享是否可用</span><br><span class="line">    browseable = yes              #共享是否可以在网络上浏览</span><br><span class="line">    valid users = wang            #用户名</span><br></pre></td></tr></table></figure>

<ul>
<li><code>smbpasswd -a wang</code> 设置共享用户密码</li>
<li><code>systemctl restart smbd.service</code> 重启smba</li>
<li><code>systemctl enable smbd.service</code> 设置开机自启动</li>
<li><code>systemctl status smbd.service</code> 查看smba状态</li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>openwrt中设置MosDNS</title>
    <url>/openwrt%E4%B8%AD%E8%AE%BE%E7%BD%AEMosDNS.html</url>
    <content><![CDATA[<h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><ul>
<li><p>勾选启用——设置监听端口（这里可以自定义）——勾选自定义国内DNS——选择对应的DNS（建议选择加密DNS）——远程DNS根据自己实际情况选择（一般保持默认即可）——<code>Bootstrap DNS</code> 服务器保持默认或者可以自行测试一下</p>
<span id="more"></span>
</li>
<li><p>设置监听端口：5335</p>
</li>
<li><p>勾选自定义国内DNS，选择对应的DNS（建议选择加密DNS）</p>
</li>
<li><p>远程DNS根据自己实际情况选择（一般保持默认即可）</p>
</li>
<li><p><code>Bootstrap DNS</code> 服务器保持默认或者可以自行测试一下</p>
</li>
</ul>
<h3 id="高级设置"><a href="#高级设置" class="headerlink" title="高级设置"></a><strong>高级设置</strong></h3><ul>
<li>DNS服务器并发数输入2</li>
<li>勾选防止DNS泄露</li>
<li>勾选启用DNS广告过滤（可选可不选）</li>
<li>规则选择<code>anti-AD</code></li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>openwrt中设置openclash</title>
    <url>/openwrt%E4%B8%AD%E8%AE%BE%E7%BD%AEopenclash.html</url>
    <content><![CDATA[<h3 id="1、插件设置"><a href="#1、插件设置" class="headerlink" title="1、插件设置"></a>1、插件设置</h3><ul>
<li><p>覆写设置：</p>
<ul>
<li><p>Github 地址修改：<a href="https://cdn.jsdelivr.net/">https://cdn.jsdelivr.net</a></p>
<span id="more"></span></li>
</ul>
</li>
<li><p>模式设置：</p>
<ul>
<li>勾选：使用 <code>Meta</code> 内核（支持的协议比较多，而且还支持一些新的协议）</li>
<li>运行模式选择<code>Fake-IP</code>模式（加快响应速度、缩短网页加载时间）</li>
<li>代理模式选择：<code>Rule</code>（策略代理），这里根据自己的实际需要来选择</li>
<li>其他的默认选择即可</li>
</ul>
</li>
<li><p>流量控制：</p>
<ul>
<li>勾选：路由本机代理</li>
<li>勾选：禁用 <code>QUIC</code></li>
</ul>
</li>
<li><p>DNS设置：</p>
<ul>
<li>本地 DNS 劫持选择：使用 <code>Dnsmasq</code> 转发</li>
<li>启用禁止 <code>Dnsmasq</code> 缓存 DNS</li>
</ul>
</li>
<li><p>GEO数据库订阅（有助于确定特定IP地址的地理位置信息）：</p>
<ul>
<li>勾选自动更新 <code>GeoIP MMDB</code> 数据库</li>
<li>勾选自动更新 <code>GeoSite</code> 数据库</li>
</ul>
</li>
</ul>
<h3 id="2、覆写设置"><a href="#2、覆写设置" class="headerlink" title="2、覆写设置"></a>2、覆写设置</h3><ul>
<li>DNS设置<ul>
<li>勾选：自定义上游 DNS 服务器</li>
<li>勾选：<code>Fake-IP </code>持久化</li>
</ul>
</li>
<li>Mate设置<ul>
<li>勾选：启用 TCP 并发</li>
<li>勾选：启用流量（域名）探测</li>
</ul>
</li>
</ul>
<h3 id="3、配合MosDNS时设置"><a href="#3、配合MosDNS时设置" class="headerlink" title="3、配合MosDNS时设置"></a>3、配合MosDNS时设置</h3><ul>
<li>插件：<ul>
<li>DNS：停用</li>
</ul>
</li>
<li>覆写：<ul>
<li>DNS：勾选自定义上游DNS</li>
<li>NameSerever：全部取消，新建一个<code>127.0.0.1:5335</code>，并启用</li>
<li>FallBack：全部取消</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>openwrt中设置zerotier</title>
    <url>/openwrt%E4%B8%AD%E8%AE%BE%E7%BD%AEzerotier.html</url>
    <content><![CDATA[<h3 id="1、VPN-zerotier-ZeroTier-Network-ID中填入ID"><a href="#1、VPN-zerotier-ZeroTier-Network-ID中填入ID" class="headerlink" title="1、VPN&gt;zerotier&gt;ZeroTier Network ID中填入ID"></a>1、VPN&gt;zerotier&gt;ZeroTier Network ID中填入ID</h3><span id="more"></span>

<h3 id="2、管理界面设置网络-接口-添加新接口"><a href="#2、管理界面设置网络-接口-添加新接口" class="headerlink" title="2、管理界面设置网络&gt;接口&gt;添加新接口"></a>2、管理界面设置网络&gt;接口&gt;添加新接口</h3><ul>
<li>接口名称随意</li>
<li>协议：不配置协议</li>
<li>接口：选zti开头的</li>
<li>提交后配置防火墙</li>
<li>自定义一个新防火墙<code>zerotier</code></li>
<li>保存并应用</li>
</ul>
<h3 id="3、管理界面设置网络-防火墙，编辑zerotier"><a href="#3、管理界面设置网络-防火墙，编辑zerotier" class="headerlink" title="3、管理界面设置网络&gt;防火墙，编辑zerotier"></a>3、管理界面设置网络&gt;防火墙，编辑zerotier</h3><ul>
<li>全选接受</li>
<li>IP动态伪装选中</li>
<li>允许转发及转发到都选LAN</li>
</ul>
<h3 id="4、通信规则-添加规则并编辑"><a href="#4、通信规则-添加规则并编辑" class="headerlink" title="4、通信规则&gt;添加规则并编辑"></a>4、通信规则&gt;添加规则并编辑</h3><ul>
<li>协议：<code>UDP</code></li>
<li>源区域：任意区域</li>
<li>目标区域：设备</li>
<li>端口：9993</li>
<li>保存并应用</li>
</ul>
<h3 id="5、zerotier官网上设置"><a href="#5、zerotier官网上设置" class="headerlink" title="5、zerotier官网上设置"></a>5、zerotier官网上设置</h3><ul>
<li><code>Advanced&gt;Add Routes</code></li>
<li><code>Destination</code>：填写局域网网段</li>
<li><code>Via</code>：填写路由的虚拟网址</li>
<li>添加</li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>openwrt固件编译</title>
    <url>/openwrt%E5%9B%BA%E4%BB%B6%E7%BC%96%E8%AF%91.html</url>
    <content><![CDATA[<h4 id="本地编译"><a href="#本地编译" class="headerlink" title="本地编译"></a>本地编译</h4><ul>
<li>首先是注意事项<br>首先装好 Ubuntu 64bit，推荐 Ubuntu 22.04<br>不要用 root 用户 git 和编译！！！<br>国内用户编译前最好准备好软件源下载加速<br>默认登陆IP 192.168.1.1, 密码 password<span id="more"></span></li>
<li>安装编译依赖</li>
</ul>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update -y</span><br><span class="line"><span class="built_in">sudo</span> apt full-upgrade -y</span><br><span class="line"><span class="built_in">sudo</span> apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \</span><br><span class="line">bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gettext gcc-multilib g++-multilib \</span><br><span class="line">git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \</span><br><span class="line">libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libncurses-dev libpython3-dev libreadline-dev \</span><br><span class="line">libssl-dev libtool llvm lrzsz genisoimage msmtp ninja-build p7zip p7zip-full patch pkgconf python3 \</span><br><span class="line">python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \</span><br><span class="line">uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev</span><br></pre></td></tr></table></figure>
<ul>
<li>下载源代码，更新 feeds 并选择配置</li>
</ul>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/coolsnowwolf/lede</span><br><span class="line"><span class="built_in">cd</span> lede</span><br><span class="line">./scripts/feeds update -a</span><br><span class="line">./scripts/feeds install -a</span><br><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>
<ul>
<li>下载 dl 库，编译固件<br>（-j 后面是线程数，第一次编译推荐用单线程）</li>
</ul>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make download -j8</span><br><span class="line">make V=s -j1</span><br></pre></td></tr></table></figure>
<ul>
<li>二次编译：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> lede</span><br><span class="line">git pull</span><br><span class="line">./scripts/feeds update -a</span><br><span class="line">./scripts/feeds install -a</span><br><span class="line">make defconfig</span><br><span class="line">make download -j8</span><br><span class="line">make V=s -j$(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>如果需要重新配置：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf .config</span><br><span class="line">make menuconfig</span><br><span class="line">make V=s -j$(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>编译完成后输出路径：bin&#x2F;targets</li>
<li>原文链接：<a href="https://github.com/coolsnowwolf/lede">https://github.com/coolsnowwolf/lede</a></li>
</ul>
<h4 id="openwrt编译步骤与命令详解"><a href="#openwrt编译步骤与命令详解" class="headerlink" title="openwrt编译步骤与命令详解"></a>openwrt编译步骤与命令详解</h4><ul>
<li><p>首次编译</p>
<ul>
<li>克隆 Open­Wrt 源码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/coolsnowwolf/lede openwrt</span><br></pre></td></tr></table></figure></li>
<li>进入源码目录 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd openwrt</span><br></pre></td></tr></table></figure></li>
<li>下载 feeds 源中的软件包源码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./scripts/feeds update -a</span><br></pre></td></tr></table></figure>
<blockquote>
<p>feeds 是扩展的软件包，独立于 Open­Wrt 源码之外，所以需要单独进行拉取和更新。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>安装 feeds 中的软件包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./scripts/feeds install -a</span><br></pre></td></tr></table></figure></li>
<li><p>调整 Open­Wrt 系统组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>
<blockquote>
<p>首次编译建议只选择架构，其它都不要动，这样编译成功率会更高。如果不打算调整组件则输入make defconfig，它会检测编译环境并生成默认的编译配置文件。</p>
</blockquote>
</li>
<li><p>预下载编译所需的软件包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make download -j8 V=s</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-j8是指使用8个线程下载，理论上是数字越大下载越快，但似乎有个上限，实测5线程以上其实速度相差不了多少，在网络好的情况下，基本在5分钟以内能下载完。</p>
</blockquote>
</li>
<li><p>检查文件完整性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find dl -size -1024c -exec ls -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此命令可以列出下载不完整的文件（根据我多次编译的经验得出小于1k的文件属于下载不完整），如果存在这样的文件可以使用find dl -size -1024c -exec rm -f {} ;命令将它们删除，然后重新执行make download下载并反复检查，确认所有文件完整可大大提高编译成功率，避免浪费时间。</p>
</blockquote>
</li>
<li><p>开始编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make -j1 V=s</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-j1：使用单线程编译。新手推荐单线程编译，一是因为玄学问题可能成功率高，二是方便查看错误日志。<br>V&#x3D;s：输出详细日志，用于编译失败时找出错误。而且满屏代码在跑能装逼，一跑就是几个小时，装逼更持久。</p>
</blockquote>
</li>
<li><p>再次编译</p>
</li>
<li><p>进入源码目录（如果不在此目录）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd openwrt</span><br></pre></td></tr></table></figure></li>
<li><p>更新</p>
<blockquote>
<p>TIPS： 短期内再次编译可忽略更新这个步骤。</p>
</blockquote>
<ul>
<li>更新系统软件包<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo sh -c &quot;apt update &amp;&amp; apt upgrade -y&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>主要作用是更新在编译环境搭建时所安装的编译组件</p>
</blockquote>
</li>
<li>拉取 Open­Wrt 源码更新<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure></li>
<li>更新 feeds 源中的软件包源码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./scripts/feeds update -a</span><br></pre></td></tr></table></figure></li>
<li>安装 feeds 中的软件包<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./scripts/feeds install -a</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>文件清理</p>
<ul>
<li>清除旧的编译产物（可选）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在源码有大规模更新或者内核更新后执行，以保证编译质量。此操作会删除&#x2F;bin和&#x2F;build_dir目录中的文件。</p>
</blockquote>
</li>
<li>清除旧的编译产物、交叉编译工具及工具链等目录（可选）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make dirclean</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更换架构编译前必须执行。此操作会删除&#x2F;bin和&#x2F;build_dir目录的中的文件(make clean)以及&#x2F;staging_dir、&#x2F;toolchain、&#x2F;tmp和&#x2F;logs中的文件。</p>
</blockquote>
</li>
<li>清除 Open­Wrt 源码以外的文件（可选）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make distclean</span><br></pre></td></tr></table></figure>
<blockquote>
<p>除非是做开发，并打算 push 到 GitHub 这样的远程仓库，否则几乎用不到。此操作相当于make dirclean外加删除&#x2F;dl、&#x2F;feeds目录和.config文件。</p>
</blockquote>
</li>
<li>还原 Open­Wrt 源码到初始状态（可选）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clean -xdf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果把源码改坏了，或者长时间没有进行编译时使用。</p>
</blockquote>
</li>
<li>清除临时文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf tmp</span><br></pre></td></tr></table></figure>
<blockquote>
<p>删除执行make menuconfig后产生的一些临时文件，包括一些软件包的检索信息，删除后会重新加载package目录下的软件包。若不删除会导致一些新加入的软件包不显示。</p>
</blockquote>
</li>
<li>删除编译配置文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -f .config</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在不删除的情况下如果取消选择某些组件它的依赖组件不会自动取消，所以对于需要调整组件的情况下建议删除。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>编译</p>
<ul>
<li>调整 Open­Wrt 系统组件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果不打算调整组件则输入make defconfig，它会检测编译环境并根据更新自动调整编译配置文件。</p>
</blockquote>
</li>
<li>预下载编译所需的软件包<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make download -j8 V=s</span><br></pre></td></tr></table></figure></li>
<li>检查文件完整性<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find dl -size -1024c -exec ls -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此命令可以列出下载不完整的文件（根据我多次编译的经验得出小于1k的文件属于下载不完整），如果存在这样的文件可以使用find dl -size -1024c -exec rm -f {} ;命令将它们删除，然后重新执行make download下载并反复检查，确认所有文件完整可大大提高编译成功率，避免浪费时间。</p>
</blockquote>
</li>
<li>开始编译<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make -j$(nproc) || make -j1 || make -j1 V=s</span><br></pre></td></tr></table></figure>
<blockquote>
<p>多线程编译失败后自动进入单线程编译，失败则输出详细日志。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>原文链接：<a href="https://p3terx.com/archives/openwrt-compilation-steps-and-commands.html">https://p3terx.com/archives/openwrt-compilation-steps-and-commands.html</a></p>
</li>
</ul>
<h4 id="在线云编译"><a href="#在线云编译" class="headerlink" title="在线云编译"></a>在线云编译</h4><ul>
<li>前提<br>1、已经会本地编译<br>2、有GitHub账号</li>
<li>第一步<br>打开自己本地编译目录，先和大屌源码同步一下<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull</span><br><span class="line">./scripts/feeds update -a</span><br><span class="line">./scripts/feeds install -a</span><br></pre></td></tr></table></figure>
然后执行<code>make menuconfig</code> 选好后执行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make defconfig</span><br><span class="line">./scripts/diffconfig.sh &gt; seed.config</span><br></pre></td></tr></table></figure>
这样配置的差异部分就写入这个文件了</li>
<li>第二步<br>1、打开 <code>https://github.com/P3TERX/Actions-OpenWrt</code> fork这个项目<br>2、之后在自己fork出来的项目里的网页里创建一个新文件（点击Create new file）<code>.conifg</code><br>3、然后把前面提到的seed.config文件的内容粘贴进来<br>4、其它修改化设置可以查看<code>https://p3terx.com/archives/build-openwrt-with-github-actions.html</code></li>
<li>第三步<br>1、在<code>Actions</code>页面可以手动开始编译了<br>2、固件下载在<code>Actions--Build OpenWrt--Artifacts--OpenWrt firmware</code></li>
<li>原文链接：<a href="https://github.com/coolsnowwolf/lede/issues/2288">https://github.com/coolsnowwolf/lede/issues/2288</a></li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>openwrt通过dhcp自定义分配网关</title>
    <url>/openwrt%E9%80%9A%E8%BF%87dhcp%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%85%8D%E7%BD%91%E5%85%B3.html</url>
    <content><![CDATA[<h2 id="首先你需要给设备绑定静态IP"><a href="#首先你需要给设备绑定静态IP" class="headerlink" title="首先你需要给设备绑定静态IP"></a>首先你需要给设备绑定静态IP</h2><h2 id="在openwrt中依次选择：网络-接口-LAN-DHCP-高级设置，在DHCP选项中设置"><a href="#在openwrt中依次选择：网络-接口-LAN-DHCP-高级设置，在DHCP选项中设置" class="headerlink" title="在openwrt中依次选择：网络-&gt;接口-&gt;LAN-&gt;DHCP-&gt;高级设置，在DHCP选项中设置"></a>在openwrt中依次选择：网络-&gt;接口-&gt;LAN-&gt;DHCP-&gt;高级设置，在DHCP选项中设置</h2><ul>
<li><code>tag:name,3,192.168.50.2</code><span id="more"></span></li>
<li>参数说明，每个<code>,</code>为一项<ul>
<li><code>tag:</code>标签设置，后面的名字可以自定义</li>
<li>第二项<code>3</code>代表设置网关，常用可选项有：<ul>
<li><code>1</code>代表设置子网掩码</li>
<li><code>3</code>代表设置网关</li>
<li><code>6</code>代表设置DNS</li>
</ul>
</li>
<li>第三项为你要设置的静态IP地址</li>
</ul>
</li>
</ul>
<h2 id="通过这样的设置，在你有旁路网关时，可以灵活的给内网设备分配网关，而不用在每个设备上设置"><a href="#通过这样的设置，在你有旁路网关时，可以灵活的给内网设备分配网关，而不用在每个设备上设置" class="headerlink" title="通过这样的设置，在你有旁路网关时，可以灵活的给内网设备分配网关，而不用在每个设备上设置"></a>通过这样的设置，在你有旁路网关时，可以灵活的给内网设备分配网关，而不用在每个设备上设置</h2>]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>tpclash尝试记录</title>
    <url>/tpclash%E5%B0%9D%E8%AF%95%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><blockquote>
<p><a href="https://www.youtube.com/watch?v=KrjCBS8vgFY">抛弃openwrt，用linux部署代理全家科学上网。最稳的纯翻墙方案，电视盒子也能部署 - YouTube</a></p>
</blockquote>
<span id="more"></span>
<h2 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h2><ul>
<li><p>通过博主的指引，下载了github仓库里的几个文件</p>
<ul>
<li><p>首先是下载了这个版本tpclash-mihomo-linux-amd64-v3，经过尝试启动不起来</p>
</li>
<li><p>然后下载了tpclash-mihomo-linux-amd64版本，顺利启动</p>
</li>
<li><p>经过博主的指引修改的配置文件中少了一行命令，导致web页面没启动。代码如下下  </p>
<p><code>external-controller: 0.0.0.0:9090</code></p>
</li>
<li><p>最终顺利启动，也测试成功，代理时出现的问题是，我发现自己的ipv6在没有禁用的情况下，会通过ipv6泄漏dns，我个人无法解决，又不想禁用ipv6，决定暂时弃用，待找到方案后再使用，这是一坑</p>
</li>
<li><p>等我根据使用文档，关闭开机自启，并关闭软件后，又有新问题出现了，就是我的ubuntu不能连网了，因为我自己是菜鸟，不会排查问题，所以解决问题的方法就是重装了系统，折腾了几个小时，幸好没有太多数据，这也是教训，测试不要在正在使用的服务器的进行，另建一个虚拟机最好。</p>
</li>
<li><p>下面记录下代码头部的完整部分，以备下次折腾</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 请指定自己实际的接口名称(ip a 获取)</span><br><span class="line">interface-name: ens18</span><br><span class="line"></span><br><span class="line">external-controller: 0.0.0.0:9090</span><br><span class="line"></span><br><span class="line">tun:</span><br><span class="line">  enable: true</span><br><span class="line">  stack: system</span><br><span class="line">  dns-hijack:</span><br><span class="line">    - any:53</span><br><span class="line">  #   - 8.8.8.8:53</span><br><span class="line">  #   - tcp://8.8.8.8:53</span><br><span class="line">  # auto-route 与 ebpf 冲突, 不能同时使用</span><br><span class="line">  #auto-route: true</span><br><span class="line">  #auto-redir: true</span><br><span class="line">  #auto-detect-interface: true</span><br><span class="line"></span><br><span class="line"># ebpf 需要指定物理网卡</span><br><span class="line">ebpf:</span><br><span class="line">  redirect-to-tun:</span><br><span class="line">    - ens18</span><br><span class="line"></span><br><span class="line"># ebpf 需要配置 mark</span><br><span class="line">routing-mark: 666</span><br><span class="line"></span><br><span class="line"># 开启 DNS 配置, 且使用 fake-ip 模式</span><br><span class="line">dns:</span><br><span class="line">  enable: true</span><br><span class="line">  listen: 0.0.0.0:1053</span><br><span class="line">  enhanced-mode: fake-ip</span><br><span class="line">  fake-ip-range: 198.18.0.1/16</span><br><span class="line">  default-nameserver:</span><br><span class="line">    - 223.5.5.5</span><br><span class="line">    - 119.29.29.29</span><br><span class="line">  nameserver:</span><br><span class="line">    - 223.5.5.5</span><br><span class="line">    - 119.29.29.29</span><br><span class="line"></span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>一些特殊端口</title>
    <url>/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%AB%AF%E5%8F%A3.html</url>
    <content><![CDATA[<h2 id="建站时，网页无法连接时可能的端口原因"><a href="#建站时，网页无法连接时可能的端口原因" class="headerlink" title="建站时，网页无法连接时可能的端口原因"></a>建站时，网页无法连接时可能的端口原因</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>提示信息为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无法访问此网站</span><br><span class="line">网址为 http://localhost:6666/的网页可能暂时无法连接，或者它已永久性地移动到了新网址。</span><br><span class="line">ERR_UNSAFE_PORT</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>本地服务已启动，使用Postman可以访问，使用浏览器无法访问。</p>
<h3 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h3><p>这是由于浏览器默认的非安全端口所导致的，所谓非安全端口，就是浏览器出于安全问题，会禁止一些网络浏览向外的端口。Google Chrome 默认非安全端口列表，搭建网站要建议尽量避免以下端口：</p>
<table>
<thead>
<tr>
<th>端口号</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>tcpmux</td>
</tr>
<tr>
<td>7</td>
<td>echo</td>
</tr>
<tr>
<td>9</td>
<td>discard</td>
</tr>
<tr>
<td>11</td>
<td>systat</td>
</tr>
<tr>
<td>13</td>
<td>daytime</td>
</tr>
<tr>
<td>15</td>
<td>netstat</td>
</tr>
<tr>
<td>17</td>
<td>qotd</td>
</tr>
<tr>
<td>19</td>
<td>chargen</td>
</tr>
<tr>
<td>21</td>
<td>ftp data</td>
</tr>
<tr>
<td>22</td>
<td>ftp access</td>
</tr>
<tr>
<td>23</td>
<td>telnet</td>
</tr>
<tr>
<td>25</td>
<td>smtp</td>
</tr>
<tr>
<td>37</td>
<td>time</td>
</tr>
<tr>
<td>42</td>
<td>name</td>
</tr>
<tr>
<td>43</td>
<td>nicname</td>
</tr>
<tr>
<td>53</td>
<td>domain</td>
</tr>
<tr>
<td>77</td>
<td>priv-rjs</td>
</tr>
<tr>
<td>79</td>
<td>finger</td>
</tr>
<tr>
<td>87</td>
<td>ttylink</td>
</tr>
<tr>
<td>95</td>
<td>supdup</td>
</tr>
<tr>
<td>101</td>
<td>hostriame</td>
</tr>
<tr>
<td>102</td>
<td>iso-tsap</td>
</tr>
<tr>
<td>103</td>
<td>gppitnp</td>
</tr>
<tr>
<td>104</td>
<td>acr-nema</td>
</tr>
<tr>
<td>109</td>
<td>pop2</td>
</tr>
<tr>
<td>110</td>
<td>pop3</td>
</tr>
<tr>
<td>111</td>
<td>sunrpc</td>
</tr>
<tr>
<td>113</td>
<td>auth</td>
</tr>
<tr>
<td>115</td>
<td>sftp</td>
</tr>
<tr>
<td>117</td>
<td>uucp-path</td>
</tr>
<tr>
<td>119</td>
<td>nntp</td>
</tr>
<tr>
<td>123</td>
<td>NTP</td>
</tr>
<tr>
<td>135</td>
<td>loc-srv &#x2F;epmap</td>
</tr>
<tr>
<td>139</td>
<td>netbios</td>
</tr>
<tr>
<td>143</td>
<td>imap2</td>
</tr>
<tr>
<td>179</td>
<td>BGP</td>
</tr>
<tr>
<td>389</td>
<td>ldap</td>
</tr>
<tr>
<td>465</td>
<td>smtp+ssl</td>
</tr>
<tr>
<td>512</td>
<td>print &#x2F; exec</td>
</tr>
<tr>
<td>513</td>
<td>login</td>
</tr>
<tr>
<td>514</td>
<td>shell</td>
</tr>
<tr>
<td>515</td>
<td>printer</td>
</tr>
<tr>
<td>526</td>
<td>tempo</td>
</tr>
<tr>
<td>530</td>
<td>courier</td>
</tr>
<tr>
<td>531</td>
<td>chat</td>
</tr>
<tr>
<td>532</td>
<td>netnews</td>
</tr>
<tr>
<td>540</td>
<td>uucp</td>
</tr>
<tr>
<td>556</td>
<td>remotefs</td>
</tr>
<tr>
<td>563</td>
<td>nntp+ssl</td>
</tr>
<tr>
<td>587</td>
<td>stmp?</td>
</tr>
<tr>
<td>601</td>
<td>??</td>
</tr>
<tr>
<td>636</td>
<td>ldap+ssl</td>
</tr>
<tr>
<td>993</td>
<td>ldap+ssl</td>
</tr>
<tr>
<td>995</td>
<td>pop3+ssl</td>
</tr>
<tr>
<td>2049</td>
<td>nfs</td>
</tr>
<tr>
<td>3659</td>
<td>apple-sasl &#x2F; PasswordServer</td>
</tr>
<tr>
<td>4045</td>
<td>lockd</td>
</tr>
<tr>
<td>6000</td>
<td>X11</td>
</tr>
<tr>
<td>6665</td>
<td>Alternate IRC [Apple addition]</td>
</tr>
<tr>
<td>6666</td>
<td>Alternate IRC [Apple addition]</td>
</tr>
<tr>
<td>6667</td>
<td>Standard IRC [Apple addition]</td>
</tr>
<tr>
<td>6668</td>
<td>Alternate IRC [Apple addition]</td>
</tr>
<tr>
<td>6669</td>
<td>Alternate IRC [Apple addition]</td>
</tr>
</tbody></table>
<h3 id="如何解决："><a href="#如何解决：" class="headerlink" title="如何解决："></a>如何解决：</h3><ul>
<li><strong>更换服务启动端口</strong>:推荐使用这种，免去了配置的麻烦。</li>
<li><strong>Chrome</strong>:找到chrome快捷方式，右键查看属性，在【目标】输入框后面追加一个参数<code>–explicitly-allowed-ports=6666</code>，关闭浏览器，从此快捷方式打开，成功访问。如果需要设置多个端口则写为<code>–explicitly-allowed-ports=6666,6667</code>的格式。</li>
<li><strong>Firefox</strong>:打开新标签页，地址栏输入 <code>about:config</code> 打开浏览器配置页面，搜索首选项<code>network.security.ports.banned.override</code>，如果没有则添加（首选项类型为字符串），将其值设为6666。再次尝试访问受限站点成功。如果需要设置多个端口，则把首选项值设为6666,6667的格式即可。</li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>使用FFmpeg为视频添加字幕</title>
    <url>/%E4%BD%BF%E7%94%A8FFmpeg%E4%B8%BA%E8%A7%86%E9%A2%91%E6%B7%BB%E5%8A%A0%E5%AD%97%E5%B9%95.html</url>
    <content><![CDATA[<h3 id="编入视频流（内嵌字幕-硬字幕）"><a href="#编入视频流（内嵌字幕-硬字幕）" class="headerlink" title="编入视频流（内嵌字幕|硬字幕）"></a>编入视频流（内嵌字幕|硬字幕）</h3><p>要在视频流上面加上字幕，就得使用一个叫做 <code>subtitles</code> 的滤镜，要使用这个滤镜，在命令中写上 <code>-vf subtitles=字幕文件名</code> ，还是要注意，如果文件名包含空格或其他特殊字符，得用半角引号包起来： <code>-vf subtitles=&quot;字幕 文件名&quot;</code>。因为这个操作改写了视频流，所以视频流必须得重新编码。<br>使用 <code>subtitles</code> 滤镜为视频添加字幕（将字幕合成到视频流中，输出文件中不含字幕流）：</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mkv -vf subtitles=subtitles.srt output.mkv</span><br></pre></td></tr></table></figure>
<p>将 <code>input.mkv</code> 中的字幕（默认）嵌入到 <code>output.mp4</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mkv -vf subtitles=input.mkv output.mp4</span><br></pre></td></tr></table></figure>
<p>将 <code>input.mkv</code> 中的字幕（第二个）嵌入到 <code>output.mp4</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mkv -vf subtitles=input.mkv:si=1 output.mp4</span><br></pre></td></tr></table></figure>
<p>关于<code> subtitles</code> 滤镜的详细用法：<a href="http://ffmpeg.org/ffmpeg-all.html#subtitles-1">http://ffmpeg.org/ffmpeg-all.html#subtitles-1</a><br>还可以使用 <code>ass</code> 滤镜，用法和 <code>subtitles</code> 滤镜几乎一样，但它只用于 ASS (Ad­vanced Sub­sta­tion Al­pha) 字幕文件，可以先进行字幕转换，再使用它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i subtitles.srt subtitles.ass</span><br><span class="line">ffmpeg -i input.mkv -vf ass=subtitles.ass output.mp4</span><br></pre></td></tr></table></figure>
<p>关于 <code>ass</code> 滤镜的说明：<a href="http://ffmpeg.org/ffmpeg-all.html#ass">http://ffmpeg.org/ffmpeg-all.html#ass</a><br>在实际使用中发现 <code>ass</code> 和 <code>subtitles</code> 最终效果并无区别，但 <code>ass</code> 只能使用 ASS 字幕文件，不可以直接使用容器中的字幕流，所以直接使用 <code>subtitles</code> 即可，省去了手动提取和转换的过程。</p>
<h3 id="作为字幕流（内封字幕-软字幕）作为字幕流（内封字幕-软字幕）"><a href="#作为字幕流（内封字幕-软字幕）作为字幕流（内封字幕-软字幕）" class="headerlink" title="作为字幕流（内封字幕|软字幕）作为字幕流（内封字幕|软字幕）"></a>作为字幕流（内封字幕|软字幕）作为字幕流（内封字幕|软字幕）</h3><p>将字幕封装到容器中，就是所谓的字幕流，和视频流、音频流同等地位。值得说明的是，并非所有的容器都支持字幕流，先进的 MKV 是支持的，MP4 目前我只知道支持苹果的 MOV text。<br>MKV 封装工具：<a href="https://mkvtoolnix.download/" title="MKVToolNix">MKVToolNix</a><br>MKV 提取工具：<a href="https://sourceforge.net/projects/gmkvextractgui/" title="gMKVExtractGUI">gMKVExtractGUI</a>、<a href="https://sourceforge.net/projects/mkvextractgui-2/" title="MKVExtractGUI">MKVExtractGUI</a><br>MKVEx­tract­GUI 无法使用，原因未知</p>
<blockquote>
<p>使用图形化工具更方便。</p>
</blockquote>
<h3 id="将字幕封装到容器中将字幕封装到容器中"><a href="#将字幕封装到容器中将字幕封装到容器中" class="headerlink" title="将字幕封装到容器中将字幕封装到容器中"></a>将字幕封装到容器中将字幕封装到容器中</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mkv -i subtitles.srt -c copy output.mkv</span><br></pre></td></tr></table></figure>

<h3 id="从容器中提取字幕流"><a href="#从容器中提取字幕流" class="headerlink" title="从容器中提取字幕流"></a>从容器中提取字幕流</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mkv output.srt</span><br></pre></td></tr></table></figure>
<p>例子中生成的是 srt 格式的，可以任意生成所需的格式，改一下扩展名即可。</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://p3terx.com/archives/add-captions-to-your-videos-with-ffmpeg.html" title="使用 FFmpeg 为视频添加字幕">使用 FFmpeg 为视频添加字幕</a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>凡科网站ssl证书制作及上传</title>
    <url>/%E5%87%A1%E7%A7%91%E7%BD%91%E7%AB%99ssl%E8%AF%81%E4%B9%A6%E5%88%B6%E4%BD%9C%E5%8F%8A%E4%B8%8A%E4%BC%A0.html</url>
    <content><![CDATA[<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>在<code>https://certcloud.cn/</code>上注册并登陆</li>
<li>下载<code>CMLite</code>软件并安装</li>
<li>在软件中申请证书<span id="more"></span></li>
<li>申请证书后需要在网站域名管理里面域名解析中添加解析记录</li>
<li>然后如果申请成功，添加时如果提示证书链不全时需要进行下列操作<ul>
<li>打开网站<code>https://myssl.com/chain_download.html</code></li>
<li>上传证书并获取证书链接</li>
<li>然后下载证书链接</li>
<li>在新跳转的证书链接页面右键另存为<code>.crt</code>后缀的文件</li>
<li>然后再次上传应该就没问题了</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>网站建设</tag>
      </tags>
  </entry>
  <entry>
    <title>皋翰液位计参数表</title>
    <url>/%E7%9A%8B%E7%BF%B0%E6%B6%B2%E4%BD%8D%E8%AE%A1%E5%8F%82%E6%95%B0%E8%A1%A8.html</url>
    <content><![CDATA[<ul>
<li>正常需要的设定参数  <ul>
<li>传感器量程，长按上键设置</li>
<li>水池深度，也就是光柱显示，长按下键设置    <span id="more"></span>    </li>
<li>数值校正，也就是实际液位与显示液位的校正，一般是少显示，输入的数值是增加的数值。长按移位  <table>
<thead>
<tr>
<th>参数</th>
<th>功能定义</th>
<th>出厂参数</th>
</tr>
</thead>
<tbody><tr>
<td>AH</td>
<td>上限蜂鸣器绝对值报警，并输出直流电压</td>
<td>30.00</td>
</tr>
<tr>
<td>AL</td>
<td>下限蜂鸣器绝对值报警，并输出直流电压</td>
<td>-1.00</td>
</tr>
<tr>
<td>BS</td>
<td>开始补水值</td>
<td>-1.00</td>
</tr>
<tr>
<td>Bt</td>
<td>补水停止值</td>
<td>30.00</td>
</tr>
<tr>
<td>PS</td>
<td>排水开始值</td>
<td>30.00</td>
</tr>
<tr>
<td>Pt</td>
<td>排水停止值</td>
<td>0.00</td>
</tr>
<tr>
<td>LOCK</td>
<td>LOCK&#x3D;0003进入二级菜单，LOCK&#x3D;111长按保存还原出厂参数</td>
<td></td>
</tr>
<tr>
<td>dot</td>
<td>小数点</td>
<td></td>
</tr>
<tr>
<td>PUL</td>
<td>量程下限</td>
<td>0.00</td>
</tr>
<tr>
<td>PUH</td>
<td>量程上限</td>
<td>5.00</td>
</tr>
<tr>
<td>SC</td>
<td>误差修正数</td>
<td>0.00</td>
</tr>
<tr>
<td>K1</td>
<td>介质密度，直接输入，无需换算</td>
<td>1.00</td>
</tr>
<tr>
<td>H2</td>
<td>光柱比例</td>
<td>5.00</td>
</tr>
<tr>
<td>PH</td>
<td>1&#x3D;排水，2&#x3D;补水</td>
<td>1</td>
</tr>
<tr>
<td>BH</td>
<td>1&#x3D;排水，2&#x3D;补水</td>
<td>2</td>
</tr>
<tr>
<td>bAUd</td>
<td>1200 2400 4800 9600</td>
<td>9600</td>
</tr>
<tr>
<td>ADDR</td>
<td>通讯地址</td>
<td>1</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>work</tag>
      </tags>
  </entry>
  <entry>
    <title>解厄鉴</title>
    <url>/%E8%A7%A3%E5%8E%84%E9%89%B4.html</url>
    <content><![CDATA[<h3 id="作者：晏殊"><a href="#作者：晏殊" class="headerlink" title=" 作者：晏殊"></a><center> 作者：晏殊</h3><h2 id="藏锋卷-第一"><a href="#藏锋卷-第一" class="headerlink" title="藏锋卷 第一"></a>藏锋卷 第一</h2><p>  厄者，人之本也。锋者，厄之厉也。厄欲减，才莫显。<br>  上求贤，毕其功而志易。下求荣，成其事而意满。不知戒惕，上下难容也。<br>  仁者不逐其名，仁贵焉。明者不恋其位，明弃焉。勇者不争其锋，勇敛焉。<br>  生之惟艰，何足道哉？</p>
<span id="more"></span>
<h2 id="隐智卷-第二"><a href="#隐智卷-第二" class="headerlink" title="隐智卷 第二"></a>隐智卷 第二</h2><p>  用智者利，弄智者弊。暗用无敌，彰显无功。<br>  不为已谋，君子之智也。莫使已亏，小人之奸也。不怨智寡，忠义换焉。<br>  上惟忠，能次之。下惟实，术次之。不明其心，厄之难止。<br>  愚者言智，愚也。智者言智，祸也。</p>
<h2 id="戒欲卷-第三"><a href="#戒欲卷-第三" class="headerlink" title="戒欲卷 第三"></a>戒欲卷 第三</h2><p>  欲大无根，心宽无恨。好之莫极，强之有咎。<br>  君子修身，避祸也。小人无忌，授首也。一念之失，死生之别也。<br>  治贪以严，莫以宽。惩淫以辱，莫以隐。伐恶以尽，莫以慈。<br>  制欲求于德，勿求于诫。悟者畅达，迷者困矣。</p>
<h2 id="省身卷-第四"><a href="#省身卷-第四" class="headerlink" title="省身卷 第四"></a>省身卷 第四</h2><p>  自知者弗窘也。识世者无求也。<br>  人有异，命不同焉。物有别，衰相近焉。待已如人，大计不失。<br>  智不及事，非察莫中。人心多易，非思难度。俗不堪亲，非礼无存。<br>  忧身者无邪，正而九焉。忧心者无疚，宁而吉焉。</p>
<h2 id="求实卷-第五"><a href="#求实卷-第五" class="headerlink" title="求实卷 第五"></a>求实卷 第五</h2><p>  致远者实，近利者虚。众趋者慎，已悦者进。<br>  不拘于书，则不失于本。不求于全，则不损于实。人无贱者，惟自弃也。<br>  大智无诈，顺乎天也。小智无德，背乎情也。识察勿忧，忧弗学也。<br>  苦劳而少获，非实之过也。闲逸而多得，乃实之旨焉。</p>
<h2 id="慎言卷-第六"><a href="#慎言卷-第六" class="headerlink" title="慎言卷 第六"></a>慎言卷 第六</h2><p>  言之祸，无论忧劣也。语之弊，由人取舍也。<br>  君子不道虚言，实则逆耳。小人不表真心，伪则障目。见言见志，其行亦断也。<br>  贵者宜谦不宜傲。卑者亦恭不宜放。人无信，则言勿听。<br>  不知机而无泄，大安也。不避亲而密疏，大患也。</p>
<h2 id="节情卷-第七"><a href="#节情卷-第七" class="headerlink" title="节情卷 第七"></a>节情卷 第七</h2><p>  知书而后忘情焉。抑性而后正身焉。<br>  纵亲见私，不容也。纵友见拙，不智也。纵怜见稚，不厚也。<br>  天怒成灾，人怒成害。君子戒悲，小人戒忧。不舍之情，羁身也。<br>  幸不恃色，荣定其品也。义不恃媚，信定其谐也。</p>
<h2 id="向善卷-第八"><a href="#向善卷-第八" class="headerlink" title="向善卷 第八"></a>向善卷 第八</h2><p>  吉有其因，福有其源。天佑善者，其心悟焉。<br>  言善未必善，观其行也。言恶未必恶，审其心也。名勿信，实勿怠。<br>  君子亦怨，不误其事。小人亦友，不辍其争。利可求，遵可守。<br>  恶惑愚不惑智也。善贵诚不贵法也。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>古文</tag>
      </tags>
  </entry>
  <entry>
    <title>路由器中设置hosts</title>
    <url>/%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%AD%E8%AE%BE%E7%BD%AEhosts.html</url>
    <content><![CDATA[<h3 id="1、新建修改myhosts"><a href="#1、新建修改myhosts" class="headerlink" title="1、新建修改myhosts"></a>1、新建修改myhosts</h3><span id="more"></span>

<ul>
<li>SSH连接路由</li>
<li><code>vim /etc/myhosts</code> 建立文件</li>
<li><code>192.168.2.1 domain.com</code> 添加记录</li>
<li><code>108.160.166.42 api.themoviedb.org</code></li>
<li><code>114.43.24.59 lncn.org</code></li>
</ul>
<h3 id="2、路由界面设置"><a href="#2、路由界面设置" class="headerlink" title="2、路由界面设置"></a>2、路由界面设置</h3><ul>
<li><code>DHCP/DNS&gt;HOSTS</code>解析文件&gt;额外解析文件添加： <code>/etc/myhosts</code></li>
</ul>
<h3 id="3、SSH输入命令刷新"><a href="#3、SSH输入命令刷新" class="headerlink" title="3、SSH输入命令刷新"></a>3、SSH输入命令刷新</h3><ul>
<li><code>service restart dnsmasq</code></li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>aria2的安装及使用</title>
    <url>/aria2%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<h3 id="windows安装Aria2"><a href="#windows安装Aria2" class="headerlink" title="windows安装Aria2"></a>windows安装Aria2</h3><h4 id="下载及安装"><a href="#下载及安装" class="headerlink" title="下载及安装"></a>下载及安装</h4><ul>
<li>官方下载地址：<code>https://github.com/aria2/aria2/releases</code></li>
<li>下载后解压至程序目录</li>
<li>在目录下新建四个文件<span id="more"></span>
<ul>
<li>Aria2.log   （日志，空文件就行）</li>
<li>aria2.session  （下载历史，空文件就行）</li>
<li>aria2.conf  （配置文件）</li>
<li>HideRun.vbs  （隐藏cmd窗口运行用到，此文件用于启动）</li>
</ul>
</li>
</ul>
<h4 id="Aria2配置"><a href="#Aria2配置" class="headerlink" title="Aria2配置"></a>Aria2配置</h4><ul>
<li>编辑aria2.conf ，复制以下内容到文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## &#x27;#&#x27;开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##</span><br><span class="line">## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  ##</span><br><span class="line"></span><br><span class="line">## 文件保存相关 ##</span><br><span class="line"></span><br><span class="line"># 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置</span><br><span class="line">dir=E:\Downloads</span><br><span class="line"># 日志文件</span><br><span class="line">log=E:\APP\Aria2\aria2.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M</span><br><span class="line">disk-cache=16M</span><br><span class="line"># 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc</span><br><span class="line"># 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc</span><br><span class="line"># falloc和trunc则需要文件系统和内核支持</span><br><span class="line"># NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项</span><br><span class="line">#file-allocation=none</span><br><span class="line"># 断点续传</span><br><span class="line">continue=true</span><br><span class="line"></span><br><span class="line">## 下载连接相关 ##</span><br><span class="line"></span><br><span class="line"># 最大同时下载任务数, 运行时可修改, 默认:5</span><br><span class="line">#max-concurrent-downloads=5</span><br><span class="line"># 同一服务器连接数, 添加时可指定, 默认:1,最大为16</span><br><span class="line">max-connection-per-server=6</span><br><span class="line"># 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M</span><br><span class="line"># 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载</span><br><span class="line">min-split-size=10M</span><br><span class="line"># 单个任务最大线程数, 添加时可指定, 默认:5</span><br><span class="line">#split=5</span><br><span class="line"># 整体下载速度限制, 运行时可修改, 默认:0</span><br><span class="line">#max-overall-download-limit=0</span><br><span class="line"># 单个任务下载速度限制, 默认:0</span><br><span class="line">#max-download-limit=0</span><br><span class="line"># 整体上传速度限制, 运行时可修改, 默认:0</span><br><span class="line">#max-overall-upload-limit=0</span><br><span class="line"># 单个任务上传速度限制, 默认:0</span><br><span class="line">#max-upload-limit=0</span><br><span class="line"># 禁用IPv6, 默认:false</span><br><span class="line">#disable-ipv6=true</span><br><span class="line"># 连接超时时间, 默认:60</span><br><span class="line">#timeout=60</span><br><span class="line"># 最大重试次数, 设置为0表示不限制重试次数, 默认:5</span><br><span class="line">#max-tries=5</span><br><span class="line"># 设置重试等待的秒数, 默认:0</span><br><span class="line">#retry-wait=0</span><br><span class="line"></span><br><span class="line">## 进度保存相关 ##</span><br><span class="line"></span><br><span class="line"># 从会话文件中读取下载任务</span><br><span class="line">input-file=E:\APP\Aria2\aria2.session</span><br><span class="line"># 在Aria2退出时保存`错误/未完成`的下载任务到会话文件</span><br><span class="line">save-session=E:\APP\Aria2\aria2.session</span><br><span class="line"># 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0</span><br><span class="line">#save-session-interval=60</span><br><span class="line"></span><br><span class="line">## RPC相关设置 ##</span><br><span class="line"></span><br><span class="line"># 启用RPC, 默认:false</span><br><span class="line">enable-rpc=true</span><br><span class="line"># 允许所有来源, 默认:false</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line"># 允许非外部访问, 默认:false</span><br><span class="line">rpc-listen-all=true</span><br><span class="line"># 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同</span><br><span class="line">#event-poll=select</span><br><span class="line"># RPC监听端口, 端口被占用时可以修改, 默认:6800</span><br><span class="line">rpc-listen-port=6800</span><br><span class="line"># 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项</span><br><span class="line">#rpc-secret=&lt;TOKEN&gt;</span><br><span class="line"># 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span><br><span class="line">#rpc-user=&lt;USER&gt;</span><br><span class="line"># 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span><br><span class="line">#rpc-passwd=&lt;PASSWD&gt;</span><br><span class="line"># 是否启用 RPC 服务的 SSL/TLS 加密,</span><br><span class="line"># 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接</span><br><span class="line">#rpc-secure=true</span><br><span class="line"># 在 RPC 服务中启用 SSL/TLS 加密时的证书文件,</span><br><span class="line"># 使用 PEM 格式时，您必须通过 --rpc-private-key 指定私钥</span><br><span class="line">#rpc-certificate=/path/to/certificate.pem</span><br><span class="line"># 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件</span><br><span class="line">#rpc-private-key=/path/to/certificate.key</span><br><span class="line"></span><br><span class="line">## BT/PT下载相关 ##</span><br><span class="line"></span><br><span class="line"># 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true</span><br><span class="line">#follow-torrent=true</span><br><span class="line"># BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999</span><br><span class="line">listen-port=51413</span><br><span class="line"># 单个种子最大连接数, 默认:55</span><br><span class="line">#bt-max-peers=55</span><br><span class="line"># 打开DHT功能, PT需要禁用, 默认:true</span><br><span class="line">enable-dht=true</span><br><span class="line"># 打开IPv6 DHT功能, PT需要禁用</span><br><span class="line">#enable-dht6=false</span><br><span class="line"># DHT网络监听端口, 默认:6881-6999</span><br><span class="line">#dht-listen-port=6881-6999</span><br><span class="line"># 本地节点查找, PT需要禁用, 默认:false</span><br><span class="line">bt-enable-lpd=true</span><br><span class="line"># 种子交换, PT需要禁用, 默认:true</span><br><span class="line">enable-peer-exchange=true</span><br><span class="line"># 每个种子限速, 对少种的PT很有用, 默认:50K</span><br><span class="line">#bt-request-peer-speed-limit=50K</span><br><span class="line"># 客户端伪装, PT需要</span><br><span class="line">peer-id-prefix=-TR2770-</span><br><span class="line">user-agent=Transmission/2.77</span><br><span class="line"># 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0</span><br><span class="line">seed-ratio=0</span><br><span class="line"># 强制保存会话, 即使任务已经完成, 默认:false</span><br><span class="line"># 较新的版本开启后会在任务完成后依然保留.aria2文件</span><br><span class="line">#force-save=false</span><br><span class="line"># BT校验相关, 默认:true</span><br><span class="line">#bt-hash-check-seed=true</span><br><span class="line"># 继续之前的BT任务时, 无需再次校验, 默认:false</span><br><span class="line">bt-seed-unverified=true</span><br><span class="line"># 保存磁力链接元数据为种子文件(.torrent文件), 默认:false</span><br><span class="line">bt-save-metadata=true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># bt-tracker 更新，解决Aria2 BT下载速度慢没速度的问题</span><br><span class="line">bt-tracker=udp://tracker.coppersurfer.tk:6969/announce,udp://tracker.leechers-paradise.org:6969/announce,udp://tracker.opentrackr.org:1337/announce,udp://p4p.arenabg.com:1337/announce,udp://9.rarbg.to:2710/announce,udp://9.rarbg.me:2710/announce,udp://tracker.openbittorrent.com:80/announce,udp://exodus.desync.com:6969/announce,udp://tracker.tiny-vps.com:6969/announce,udp://retracker.lanta-net.ru:2710/announce,udp://open.stealth.si:80/announce,udp://tracker.moeking.me:6969/announce,udp://denis.stalker.upeer.me:6969/announce,udp://tracker.torrent.eu.org:451/announce,udp://tracker.cyberia.is:6969/announce,udp://open.demonii.si:1337/announce,udp://ipv4.tracker.harry.lu:80/announce,udp://explodie.org:6969/announce,udp://xxxtor.com:2710/announce,udp://valakas.rollo.dnsabr.com:2710/announce</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意下面这四个选项需要根据个人情况来修改文件路径</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir=E:\Downloads</span><br><span class="line">log=E:\APP\Aria2\aria2.log</span><br><span class="line">input-file=E:\APP\Aria2\aria2.session</span><br><span class="line">save-session=E:\APP\Aria2\aria2.session</span><br></pre></td></tr></table></figure>

<ul>
<li>编辑HideRun.vbs ,并复制以下内容，注意修改E:\APP\Aria2\为你的软件路径<br><code>CreateObject(&quot;WScript.Shell&quot;).Run &quot;E:\App\Aria2\aria2c.exe --conf-path=aria2.conf&quot;,0</code></li>
</ul>
<h4 id="Aria2使用"><a href="#Aria2使用" class="headerlink" title="Aria2使用"></a>Aria2使用</h4><ul>
<li>启动Aria2时点击HideRun.vbs这个文件，不要点击aria2c.exe</li>
<li>如要开机启动，创建一个HideRun.vbs的快捷方式放在<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code>中即可</li>
<li>下载资源时打开<code>aria2c.com</code>即可</li>
<li>也可以在浏览器中安装插件<code>Aria2 Explorer</code>来使用，界面更友好美观些</li>
</ul>
<h3 id="openwrt安装aria2"><a href="#openwrt安装aria2" class="headerlink" title="openwrt安装aria2"></a>openwrt安装aria2</h3><h4 id="更新软件包列表"><a href="#更新软件包列表" class="headerlink" title="更新软件包列表"></a>更新软件包列表</h4><ul>
<li>首先，确保你的 OpenWrt 系统的软件包列表是最新的。通过 SSH 登录到路由器后，运行以下命令：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">opkg update</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="安装-Aria2"><a href="#安装-Aria2" class="headerlink" title="安装 Aria2"></a>安装 Aria2</h4><ul>
<li>使用以下命令安装 Aria2：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">opkg install aria2</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><ul>
<li>Aria2 的功能需要通过配置文件进行设置。你需要手动创建一个配置文件，通过下面命令创建配置目录：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/aria2</span><br></pre></td></tr></table></figure></li>
<li>创建配置文件：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim  /etc/aria2/aria2.conf</span><br></pre></td></tr></table></figure></li>
<li>在配置文件中添加内容(可以是上面的配置内容)</li>
</ul>
<h4 id="创建-Aria2-会话文件、日志文件"><a href="#创建-Aria2-会话文件、日志文件" class="headerlink" title="创建 Aria2 会话文件、日志文件"></a>创建 Aria2 会话文件、日志文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch /etc/aria2/aria2.session</span><br><span class="line">chmod 666 /etc/aria2/aria2.session</span><br><span class="line">touch /etc/aria2/aria2.log</span><br><span class="line">chmod 666 /etc/aria2/aria2.log</span><br></pre></td></tr></table></figure>
<h4 id="启动-Aria2（直接启动）"><a href="#启动-Aria2（直接启动）" class="headerlink" title="启动 Aria2（直接启动）"></a>启动 Aria2（直接启动）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aria2c --conf-path=/etc/aria2/aria2.conf</span><br></pre></td></tr></table></figure>
<h4 id="配置开机自启"><a href="#配置开机自启" class="headerlink" title="配置开机自启"></a>配置开机自启</h4><p>为了让 Aria2 在路由器启动时自动运行，可以创建一个自定义启动脚本。</p>
<ul>
<li>编辑启动脚本：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/init.d/aria2</span><br></pre></td></tr></table></figure></li>
<li>添加以下内容：</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh /etc/rc.common</span><br><span class="line"># OpenWrt init script for aria2</span><br><span class="line">START=99</span><br><span class="line">STOP=10</span><br><span class="line"></span><br><span class="line">start() &#123;</span><br><span class="line">    echo &quot;Starting aria2...&quot;</span><br><span class="line">    aria2c --conf-path=/etc/aria2/aria2.conf -D</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop() &#123;</span><br><span class="line">    echo &quot;Stopping aria2...&quot;</span><br><span class="line">    killall aria2c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>保存并退出后，赋予脚本可执行权限：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/init.d/aria2</span><br></pre></td></tr></table></figure></li>
<li>启用开机自启：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/aria2 enable</span><br></pre></td></tr></table></figure></li>
<li>手动启动 Aria2 服务：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/aria2 start</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
